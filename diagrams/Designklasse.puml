@startuml

hide empty members
skinparam groupInheritance 2

package "Game Board" {
    class Board{
    -squares: Square[]
        -pennyBagPosition: int

        +getSquare(): Square
        +addBooth(Player, position:int) : void
        +removeBooth(position): void
        +hasMonopoly(): boolean

        -readCSV(): void
    }

    class "<<abstract>>\nSquare" as Square{
        -name: String
        -position: int
        -Effect?!
    }
        class Amusement{
          -boothOwner: Player
          -COLOR: String
          -PRICE: int
        }
        class Restrooms
        class Go{
          -AMOUNT: int
        }
        'before was start
        class Railroad{
           -COLOR: String
        }
        class Chance
        class PennyBag{
           amountOfMoneyPlaced: int

           +addMoney(int amount): void
           +withDraw(): int

        }
        class PayForSee{
           -AMOUNT: int
        }
}

package Logic {
    class Bank{
         debug: Debug
        -ableToPay(Player player,int amount): void
        +payToBank(Player fromPlayer,int amount): void
        +payToPlayer(Player fromPlayer,Player toPlayer,int amount): void


    }
    class GameController{
        -currentPlayer : Player
        -players : Player[]
        -extraTurn : boolean
        -gameOver : boolean


        -setupPlayers(int numPlayers) : void
        -takeTurn() : void
        -loseCheck() : void
        -findWinner() : void
        -changeTurn() : void
        +giveExtraTurn() : void
        +setupGame() : void
        +startGame() : void

    }
    class PositionHandler{
       debug: Debug
       players: Player[]
       boardSize: int
       startBonus: int

       -payBonus(Player player):void
       +movePlayer(Player player, int spacesToMove): void

    }
     class ActionHandler{
        -BOARD: board
        -currentPlayer: Player
        -GAMECONTROLLER: GameController
        -POSITIONHANDLER: PositionHandler

        +doFieldAction(Player currentPlayer, int position): void
        +doChanceCard(Chancecard card, Player currentPlayer):void

     }
}
package MonopolyJunior{
   class "Monopoly Junior" as Game{
       -players: Player[]
       -currentPlayer: Player
       -board: Board[]
       -deck: Deck
       -die: Die
       -hasWinner: boolean
       -MIN_NR_OF_PLAYERS: int
       -MAX_NR_OF_PLAYERS: int
       -START_MONEY: int
       -RESTOROOM_POSITION: int
       -MOVING_PAST_START: int
       -BOARD_SIZE: int
       -PENNYBAG_POSITION: int

       -handleField(int position): void
       -handleChance(): void
       +setupGame(): void
       +playGame(): void
       +initializePlayers(int numOfPlayers): void
       +takeTurn(): void
       +chancePlayer(): void
       +updatePosition(int moveSpaces): void
       +hasPassStart(int prevPos, int endPos, boolean goingToRestrooms) : void
       +pay(int amount): void
       +pay(Player to, int amount): void
       +paymentPossible(Player player, int amount): boolean
       +decideAndAnnounceWinner(): void

   }
   class Die{
      -faceValue: int
      -nrOfSides: int

      +roll(): void

   }
   class Player{
       -color: Color:
       -name: String
       -position: int
       -balance: int
       -boothsOnHand: int
       -goingToRestroom: boolean

       +hasBooth(): boolean
       +updateBalance(int update): void
       +useOneBooth(): void
       +setupStartBalance(int startMoney): void
   }
   class Deck{
      -chanceCardDeck: ChanceCard[]
      -drawCardCount: int

      +pullCard(): ChanceCard
      +shuffleDeck(): void
   }
   class ChanceCard{
      -chanceCardText: String
      -color: String
      -amountToPay: int
      -destination: int
   }
}

class "<<singleton>>\nLanguage" as Language

    PositionHandler -- GameController
    Bank -up- ActionHandler
    ActionHandler -left- PositionHandler
    GameController -- Player
    PositionHandler -- Player
    ActionHandler -- Player
    Game -up- Die
    Game -right- Deck
    Deck *-right- ChanceCard
    Game -left- Player
    Game -down- Board
    Board *-down- Square
    Square <|-- Restrooms
    Square <|-- Amusement
    Square <|-- Railroad
    Square <|-- PayForSee
    Square <|-- PennyBag
    Square <|-- Go
    Square <|-- Chance

@enduml